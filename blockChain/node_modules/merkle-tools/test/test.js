// Github: https://github.com/Tierion/merkle-tools 

var assert = require('assert');
var crypto = require('crypto');
var MerkleTools = require('../merkletools.js');
var readline = require('readline');

// I/O related variables 
var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});


// Stored components 
var componentA = { componentID: "SDR1703184662"}
var componentB = { componentID: "3DC027D13824"}
var componentC = { componentID: "2DC033D14233"}
var componentD = { componentID: "fake 1"}
var componentE = { componentID: "fake 2"}

var componentBank = { 'A': componentA, 'B': componentB, 'C': componentC, 'D': componentD, 'E': componentE }


// Merkle tree related variables 
var treeOptions = {
  hashType: 'sha256' // optional, defaults to 'sha256'
};
// valid hashTypes include all crypto hash algorithms
// such as 'MD5', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512'
// as well as the SHA3 family of algorithms
// including 'SHA3-224', 'SHA3-256', 'SHA3-384', and 'SHA3-512'


// Merkle-tree related functions 

// Function: Gets 3 alphanumeric letters and returns a Merkle tree built from the corresponding components 
function createMerkleTree(a, b, c) {
	var components = [componentBank[a].toString(), componentBank[b].toString(), componentBank[c].toString()]
	var tree = new MerkleTools(treeOptions); 
	console.log("Leaves: " + a, b, c);
	tree.addLeaves(components, true);
	tree.makeTree();

	var root = tree.getMerkleRoot(); 
  	console.log('Root: ' + root.inspect());  

	// add proofs to each individual leaf? 
	return tree; 
}



/***********************************************/
// STEP 1: Manufacture airbag 
var tree1 = createMerkleTree('A', 'C', 'E'); 
var root1 = tree1.getMerkleRoot(); 	

  	  


// STEP 2: Get user input 
console.log("Airbags have been manufactured! There are 5 components (A, B, C, D, E) - some are authentic and some are fake.")
console.log("An airbag has 3 components, and is authentic if it constitutes 3 authentic components.")
rl.question('Guess which components make the real airbag by typing 3 letters below! (e.g. A B C) \n', (answer) => {
   
  	

  	var ans = answer.split(" "); 
  	var tree2 = createMerkleTree(ans[0], ans[1], ans[2]);
  	var root2 = tree2.getMerkleRoot(); 

  	// TODO: Currently, it seems like root1 and root2 are both updated, as if they were passed by reference. need to fix!!!!
  	console.log('Root 1: ' + root1.inspect()); 
  	console.log('Root 2: ' + root2.inspect());
	console.log("Do your parts form a valid part?: " + (root1.equals(root2)));
	rl.close();

  
});





// console.log("Printing from outside: " + ans);
